// DO NOT EDIT. This file is generated by deco.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running `dev.ts`.

import config from "./deno.json" assert { type: "json" };
import { DecoManifest } from "$live/types.ts";
import * as $0 from "./routes/[...catchall].tsx";
import * as $1 from "./routes/_app.tsx";
import * as $2 from "./routes/_middleware.ts";
import * as $3 from "./routes/index.tsx";
import * as $$0 from "./islands/LiveControls.tsx";
import * as $$$0 from "./sections/GetStarted.tsx";
import * as $$$1 from "./sections/Head.tsx";
import * as $$$2 from "./sections/comoSeria.tsx";
import * as $$$3 from "./sections/content.tsx";
import * as $$$4 from "./sections/header.tsx";
import * as $$$5 from "./sections/teste.tsx";

const manifest: DecoManifest = {
  routes: {
    "./routes/[...catchall].tsx": $0,
    "./routes/_app.tsx": $1,
    "./routes/_middleware.ts": $2,
    "./routes/index.tsx": $3,
  },
  islands: { "./islands/LiveControls.tsx": $$0 },
  sections: {
    "./sections/GetStarted.tsx": $$$0,
    "./sections/Head.tsx": $$$1,
    "./sections/comoSeria.tsx": $$$2,
    "./sections/content.tsx": $$$3,
    "./sections/header.tsx": $$$4,
    "./sections/teste.tsx": $$$5,
  },
  functions: {},
  schemas: {
    "./sections/GetStarted.tsx": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "enableInspectVSCode": {
            "type": "boolean",
            "title": "Enable Inspect V S Code",
          },
        },
        "required": [],
      },
      "outputSchema": null,
    },
    "./sections/Head.tsx": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
          },
          "description": {
            "type": "string",
            "title": "Description",
          },
          "url": {
            "type": "string",
            "title": "Url",
          },
          "imageUrl": {
            "type": "string",
            "title": "Image Url",
          },
          "faviconUrl": {
            "type": "string",
            "title": "Favicon Url",
          },
          "styleUrls": {
            "type": "array",
            "items": {
              "type": "string",
            },
            "title": "Style Urls",
          },
          "themeColor": {
            "type": "string",
            "title": "Theme Color",
          },
        },
        "required": [
          "title",
          "description",
          "url",
          "imageUrl",
          "faviconUrl",
          "styleUrls",
          "themeColor",
        ],
      },
      "outputSchema": null,
    },
    "./sections/comoSeria.tsx": {
      "inputSchema": null,
      "outputSchema": null,
    },
    "./sections/content.tsx": {
      "inputSchema": null,
      "outputSchema": null,
    },
    "./sections/header.tsx": {
      "inputSchema": null,
      "outputSchema": null,
    },
    "./sections/teste.tsx": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "text1": {
            "type": "string",
            "title": "Text1",
          },
          "text2": {
            "type": "string",
            "title": "Text2",
          },
        },
        "required": [
          "text1",
          "text2",
        ],
      },
      "outputSchema": null,
    },
  },
  baseUrl: import.meta.url,
  config,
};

// live â€” this exposes the manifest so the live server can render components dynamically
globalThis.manifest = manifest;

export default manifest;
